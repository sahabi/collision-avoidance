controller Ca_4 where

enum Command = Stay | Asc | Des
enum Pos = None | A  
enum Layer = First | Second

input uav1_pos : Pos = None
input uav2_pos : Pos = None
input uav3_pos : Pos = None

input uav1_2_collide : Bool = False
input uav1_3_collide : Bool = False
input uav2_3_collide : Bool = False

input uav1_layer : Layer = First
input uav2_layer : Layer = First
input uav3_layer : Layer = Second

output uav1_action : Command = Stay
output uav2_action : Command = Stay
output uav3_action : Command = Stay

output uav1_goto : Pos = None
output uav2_goto : Pos = None
output uav3_goto : Pos = None

-- eventually the operating regions don't overlap
env_liveness uav1_2_collide == False
env_liveness uav1_3_collide == False
env_liveness uav2_3_collide == False

-- if the UAV is in the same layer as the mission location and commanded to go to the location, it will be there the next step
env_trans
  ((uav1_layer == First) /\ (uav1_goto == A) ) -> (uav1_pos' == A)
-- ((uav1_layer == First) /\ (uav1_goto == B) ) -> (uav1_pos' == B)
-- ((uav1_layer == Second) /\ (uav1_goto == C) ) -> (uav1_pos' == C)
-- ((uav1_layer == Second) /\ (uav1_goto == D) ) -> (uav1_pos' == D)

env_trans ((uav2_layer == First) /\ (uav2_goto == A) ) -> (uav2_pos' == A)
-- ((uav2_layer == First) /\ (uav2_goto == B) ) -> (uav2_pos' == B)
-- ((uav2_layer == Second) /\ (uav2_goto == C) ) -> (uav2_pos' == C)
-- ((uav2_layer == Second) /\ (uav2_goto == D) ) -> (uav2_pos' == D)

-- if two UAVs are in the same layer then they don't collide
env_trans ((uav1_layer == uav2_layer)) -> (uav1_2_collide == False)

env_trans ((uav1_layer == uav3_layer)) -> (uav1_3_collide == False)

env_trans ((uav2_layer == uav3_layer)) -> (uav2_3_collide == False)

-- if a UAV ascend/descend, it will change its altitude layer (bordered)
env_trans ((uav1_layer == First) /\ (uav1_action == Asc)) -> (uav1_layer' == Second)

env_trans ( (uav1_layer == First) /\ ( (uav1_action == Stay) \/ (uav1_action == Des) ) ) -> (uav1_layer' == First)

env_trans ( (uav1_layer == Second) /\ (uav1_action == Des) ) -> ( (uav1_layer' == First))

env_trans ((uav1_layer == Second) /\ ((uav1_action == Stay) \/ (uav1_action == Asc) )) -> (uav1_layer' == Second)

env_trans ((uav2_layer == First) /\ (uav2_action == Asc) ) -> (uav2_layer' == Second)

env_trans ( (uav2_layer == First) /\ ( (uav2_action == Stay) \/ (uav2_action == Des) )) -> (uav2_layer' == First)

env_trans ( (uav2_layer == Second) /\ (uav2_action == Des) ) -> (uav2_layer' == First)

env_trans ( (uav2_layer == Second) /\ ( (uav2_action == Stay) \/ (uav2_action == Asc) )) -> (uav2_layer' == Second)

-- UAV cannot change its altitude if its operating region collides with a UAV in the destination altitude layer

sys_trans ( (uav1_layer == First) /\ (uav2_layer == Second) /\ (uav1_2_collide == True)  ) -> ( (uav1_action != Asc) /\ (uav2_action != Des) )
sys_trans ( (uav1_layer == Second) /\ (uav2_layer == First) /\ (uav1_2_collide == True)  ) -> ( (uav1_action != Des) /\ (uav2_action != Asc) )

sys_trans ( (uav1_layer == First) /\ (uav3_layer == Second) /\ (uav1_3_collide == True)  ) -> ( (uav1_action != Asc) /\ (uav3_action != Des) )
sys_trans ( (uav1_layer == Second) /\ (uav3_layer == First) /\ (uav1_3_collide == True)  ) -> ( (uav1_action != Des) /\ (uav3_action != Asc) )

sys_trans ( (uav2_layer == First) /\ (uav3_layer == Second) /\ (uav2_3_collide == True)  ) -> ( (uav2_action != Asc) /\ (uav3_action != Des) )
sys_trans ( (uav2_layer == Second) /\ (uav3_layer == First) /\ (uav2_3_collide == True)  ) -> ( (uav2_action != Des) /\ (uav3_action != Asc) )

-- UAV cannot change to a mission location if in the same layer as the location


-- UAV mission

sys_liveness uav3_action == Des /\ uav3_goto' == A
