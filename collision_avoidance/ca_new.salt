controller Controller_4 where

enum Command = Stay | Asc | Des
enum Pos = None | A | B 
enum Layer = First | Second

input uav1_pos : Pos = None
input uav2_pos : Pos = None
input uav3_pos : Pos = None

input uav1_2_collide : Bool = False
input uav1_3_collide : Bool 
input uav2_3_collide : Bool = False

--input uav1_intent : Command = Stay
--input uav2_intent : Command = Stay
--input uav3_intent : Command = Stay

input uav1_layer : Layer = First
input uav2_layer : Layer = First
input uav3_layer : Layer = Second

output resolve_1_2 : Bool = False
output resolve_1_3 : Bool = False
output resolve_2_3 : Bool = False

output uav1_action : Command = Stay
output uav2_action : Command = Stay
output uav3_action : Command = Stay

output uav1_goto : Pos = None
output uav2_goto : Pos = None
output uav3_goto : Pos = None

-- eventually the operating regions don't overlap
--env_liveness 
  --uav1_2_collide == False
  --uav1_3_collide == False
  --uav2_3_collide == False
  --uav1_3_collide == False /\ uav2_3_collide == False
  --uav1_2_collide == False /\ uav1_3_collide == False
  --uav1_2_collide == False /\ uav2_3_collide == False

env_trans
  resolve_1_2 -> uav1_2_collide' == False
  resolve_1_3 -> uav1_3_collide' == False
  resolve_2_3 -> uav2_3_collide' == False

-- if the UAV is in the same layer as the mission location and commanded to go to the location, it will be there the next step


  ((uav1_layer == First) /\ (uav1_goto == A) ) -> (uav1_pos' == A)
  ((uav1_layer == Second) /\ (uav1_goto == B) ) -> (uav1_pos' == B)
-- ((uav1_layer == Second) /\ (uav1_goto == C) ) -> (uav1_pos' == C)
-- ((uav1_layer == Second) /\ (uav1_goto == D) ) -> (uav1_pos' == D)

  ((uav2_layer == First) /\ (uav2_goto == A) ) -> (uav2_pos' == A)
  ((uav2_layer == Second) /\ (uav2_goto == B) ) -> (uav2_pos' == B)
-- ((uav2_layer == Second) /\ (uav2_goto == C) ) -> (uav2_pos' == C)
-- ((uav2_layer == Second) /\ (uav2_goto == D) ) -> (uav2_pos' == D)

  ((uav3_layer == First) /\ (uav3_goto == A) ) -> (uav3_pos' == A)
  ((uav3_layer == Second) /\ (uav3_goto == B)) -> (uav3_pos' == B)

-- if two UAVs are in the same layer then they don't collide
 
  ((uav1_layer == uav2_layer)) -> (uav1_2_collide == False)
  ((uav1_layer == uav3_layer)) -> (uav1_3_collide == False)
  ((uav2_layer == uav3_layer)) -> (uav2_3_collide == False)

-- if a UAV ascend/descend, it will change its altitude layer (bordered)
  ((uav1_layer == First) /\ (uav1_action == Asc)) -> (uav1_layer' == Second)
  ((uav1_layer == First) /\ ( (uav1_action == Stay) \/ (uav1_action == Des) ) ) -> (uav1_layer' == First)
  ((uav1_layer == Second) /\ (uav1_action == Des) ) -> ( (uav1_layer' == First))
  ((uav1_layer == Second) /\ ((uav1_action == Stay) \/ (uav1_action == Asc) )) -> (uav1_layer' == Second)
  ((uav2_layer == First) /\ (uav2_action == Asc) ) -> (uav2_layer' == Second)
  ((uav2_layer == First) /\ ( (uav2_action == Stay) \/ (uav2_action == Des) )) -> (uav2_layer' == First)
  ((uav2_layer == Second) /\ (uav2_action == Des) ) -> (uav2_layer' == First)
  ((uav2_layer == Second) /\ ( (uav2_action == Stay) \/ (uav2_action == Asc) )) -> (uav2_layer' == Second)
  ((uav3_layer == First) /\ (uav3_action == Asc) ) -> (uav3_layer' == Second)
  ((uav3_layer == First) /\ ( (uav3_action == Stay) \/ (uav3_action == Des) )) -> (uav3_layer' == First)
  ((uav3_layer == Second) /\ (uav3_action == Des) ) -> (uav3_layer' == First)
  ((uav3_layer == Second) /\ ( (uav3_action == Stay) \/ (uav3_action == Asc) )) -> (uav3_layer' == Second)

-- UAV cannot change its altitude if its operating region collides with a UAV in the destination altitude layer

sys_trans 
  ((uav1_layer == First) /\ (uav2_layer == Second) /\ (uav1_2_collide == True)  ) -> ( (uav1_action != Asc) /\ (uav2_action != Des) )
  ((uav1_layer == First) /\ (uav3_layer == Second) /\ (uav1_3_collide == True)  ) -> ( (uav1_action != Asc) /\ (uav3_action != Des) )
  ((uav1_layer == Second) /\ (uav3_layer == First) /\ (uav1_3_collide == True)  ) -> ( (uav1_action != Des) /\ (uav3_action != Asc) )
  ((uav2_layer == First) /\ (uav3_layer == Second) /\ (uav2_3_collide == True)  ) -> ( (uav2_action != Asc) /\ (uav3_action != Des) )
  ((uav2_layer == Second) /\ (uav3_layer == First) /\ (uav2_3_collide == True)  ) -> ( (uav2_action != Des) /\ (uav3_action != Asc) )

--  ((uav3_layer != First) -> uav3_goto != A)

sys_trans
-- cannot goto in the same layer
  ((uav3_layer == Second) /\ (uav3_goto != A) /\ (uav3_action == Des)) -> (uav3_goto' != A)
  ((uav3_layer == First) /\ (uav3_goto != A)) -> (uav3_goto' != A)
  ((uav3_goto == A) /\ (uav3_pos != A)) -> (uav3_goto' == A)

  ((uav3_action == Stay) /\ (uav3_goto == None) /\ (uav3_action' != Stay)) -> (uav3_goto'== None)

  ((uav3_layer == First) /\ (uav3_goto != B) /\ (uav3_action == Asc)) -> (uav3_goto' != B)
  ((uav3_layer == Second) /\ (uav3_goto != B)) -> (uav3_goto' != B)
  ((uav3_goto == B) /\ (uav3_pos != B)) -> (uav3_goto' == B)

-- UAV mission

sys_liveness 
  uav3_pos == A
  uav3_pos == B
